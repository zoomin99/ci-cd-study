package com.inha.capstonedesign.voting.solidity;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;

import lombok.Getter;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.reflection.Parameterized;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class Voting extends Contract {
    public static final String BINARY = "0x608060405234801561000f575f80fd5b5061180a8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061007b575f3560e01c8063618bde0a11610059578063618bde0a146100ea578063c66ed5771461011a578063dd61a65d14610136578063e4580088146101665761007b565b80631750a3d01461007f5780632f2c27391461009b5780634404d1ed146100b9575b5f80fd5b61009960048036038101906100949190610db4565b610182565b005b6100a36102c4565b6040516100b091906110b6565b60405180910390f35b6100d360048036038101906100ce91906110d6565b6104bf565b6040516100e1929190611158565b60405180910390f35b61010460048036038101906100ff91906110d6565b610573565b6040516101119190611209565b60405180910390f35b610134600480360381019061012f9190611229565b6106f5565b005b610150600480360381019061014b9190610db4565b610748565b60405161015d919061127f565b60405180910390f35b610180600480360381019061017b9190610db4565b61086a565b005b61018b826109ae565b6101ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c1906112e2565b60405180910390fd5b5f806001846101d9919061132d565b815481106101ea576101e9611360565b5b905f5260205f20906003020190506102028183610a0f565b15610242576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610239906113d7565b60405180910390fd5b5f60405180604001604052808481526020015f60ff1681525090508160020181908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f01908161029b91906115ef565b506020820151816001015f6101000a81548160ff021916908360ff160217905550505050505050565b60605f805480602002602001604051908101604052809291908181526020015f905b828210156104b6578382905f5260205f2090600302016040518060600160405290815f820154815260200160018201805461032090611422565b80601f016020809104026020016040519081016040528092919081815260200182805461034c90611422565b80156103975780601f1061036e57610100808354040283529160200191610397565b820191905f5260205f20905b81548152906001019060200180831161037a57829003601f168201915b5050505050815260200160028201805480602002602001604051908101604052809291908181526020015f905b8282101561049f578382905f5260205f2090600202016040518060400160405290815f820180546103f490611422565b80601f016020809104026020016040519081016040528092919081815260200182805461042090611422565b801561046b5780601f106104425761010080835404028352916020019161046b565b820191905f5260205f20905b81548152906001019060200180831161044e57829003601f168201915b50505050508152602001600182015f9054906101000a900460ff1660ff1660ff1681525050815260200190600101906103c4565b5050505081525050815260200190600101906102e6565b50505050905090565b5f81815481106104cd575f80fd5b905f5260205f2090600302015f91509050805f0154908060010180546104f290611422565b80601f016020809104026020016040519081016040528092919081815260200182805461051e90611422565b80156105695780601f1061054057610100808354040283529160200191610569565b820191905f5260205f20905b81548152906001019060200180831161054c57829003601f168201915b5050505050905082565b606061057e826109ae565b6105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b4906112e2565b60405180910390fd5b5f806001846105cc919061132d565b815481106105dd576105dc611360565b5b905f5260205f209060030201905080600201805480602002602001604051908101604052809291908181526020015f905b828210156106e9578382905f5260205f2090600202016040518060400160405290815f8201805461063e90611422565b80601f016020809104026020016040519081016040528092919081815260200182805461066a90611422565b80156106b55780601f1061068c576101008083540402835291602001916106b5565b820191905f5260205f20905b81548152906001019060200180831161069857829003601f168201915b50505050508152602001600182015f9054906101000a900460ff1660ff1660ff16815250508152602001906001019061060e565b50505050915050919050565b5f60015f8054905061070791906116be565b90505f8060018160018154018082558091505003905f5260205f209060030201905081815f01819055508281600101908161074291906115ef565b50505050565b5f610752836109ae565b610791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610788906112e2565b60405180910390fd5b5f806001856107a0919061132d565b815481106107b1576107b0611360565b5b905f5260205f20906003020190505f6107ca8285610b05565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361082e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108259061173b565b60405180910390fd5b81600201818154811061084457610843611360565b5b905f5260205f2090600202016001015f9054906101000a900460ff169250505092915050565b610873826109ae565b6108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a9906112e2565b60405180910390fd5b5f806001846108c1919061132d565b815481106108d2576108d1611360565b5b905f5260205f20906003020190505f6108eb8284610b05565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810361094f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109469061173b565b60405180910390fd5b600182600201828154811061096757610966611360565b5b905f5260205f2090600202016001015f8282829054906101000a900460ff166109909190611759565b92506101000a81548160ff021916908360ff16021790555050505050565b5f805f90505b5f80549050811015610a0557825f82815481106109d4576109d3611360565b5b905f5260205f2090600302015f0154036109f2576001915050610a0a565b80806109fd9061178d565b9150506109b4565b505f90505b919050565b5f805f90505b8360020180549050811015610afa57610ad8846002018281548110610a3d57610a3c611360565b5b905f5260205f2090600202015f018054610a5690611422565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8290611422565b8015610acd5780601f10610aa457610100808354040283529160200191610acd565b820191905f5260205f20905b815481529060010190602001808311610ab057829003601f168201915b505050505084610c1a565b15610ae7576001915050610aff565b8080610af29061178d565b915050610a15565b505f90505b92915050565b5f805f90505b8360020180549050811015610bef57610bce846002018281548110610b3357610b32611360565b5b905f5260205f2090600202015f018054610b4c90611422565b80601f0160208091040260200160405190810160405280929190818152602001828054610b7890611422565b8015610bc35780601f10610b9a57610100808354040283529160200191610bc3565b820191905f5260205f20905b815481529060010190602001808311610ba657829003601f168201915b505050505084610c1a565b15610bdc5780915050610c14565b8080610be79061178d565b915050610b0b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b92915050565b5f8180519060200120838051906020012014905092915050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610c5781610c45565b8114610c61575f80fd5b50565b5f81359050610c7281610c4e565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610cc682610c80565b810181811067ffffffffffffffff82111715610ce557610ce4610c90565b5b80604052505050565b5f610cf7610c34565b9050610d038282610cbd565b919050565b5f67ffffffffffffffff821115610d2257610d21610c90565b5b610d2b82610c80565b9050602081019050919050565b828183375f83830152505050565b5f610d58610d5384610d08565b610cee565b905082815260208101848484011115610d7457610d73610c7c565b5b610d7f848285610d38565b509392505050565b5f82601f830112610d9b57610d9a610c78565b5b8135610dab848260208601610d46565b91505092915050565b5f8060408385031215610dca57610dc9610c3d565b5b5f610dd785828601610c64565b925050602083013567ffffffffffffffff811115610df857610df7610c41565b5b610e0485828601610d87565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610e4081610c45565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610e7d578082015181840152602081019050610e62565b5f8484015250505050565b5f610e9282610e46565b610e9c8185610e50565b9350610eac818560208601610e60565b610eb581610c80565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60ff82169050919050565b610efe81610ee9565b82525050565b5f604083015f8301518482035f860152610f1e8282610e88565b9150506020830151610f336020860182610ef5565b508091505092915050565b5f610f498383610f04565b905092915050565b5f602082019050919050565b5f610f6782610ec0565b610f718185610eca565b935083602082028501610f8385610eda565b805f5b85811015610fbe5784840389528151610f9f8582610f3e565b9450610faa83610f51565b925060208a01995050600181019050610f86565b50829750879550505050505092915050565b5f606083015f830151610fe55f860182610e37565b5060208301518482036020860152610ffd8282610e88565b915050604083015184820360408601526110178282610f5d565b9150508091505092915050565b5f61102f8383610fd0565b905092915050565b5f602082019050919050565b5f61104d82610e0e565b6110578185610e18565b93508360208202850161106985610e28565b805f5b858110156110a457848403895281516110858582611024565b945061109083611037565b925060208a0199505060018101905061106c565b50829750879550505050505092915050565b5f6020820190508181035f8301526110ce8184611043565b905092915050565b5f602082840312156110eb576110ea610c3d565b5b5f6110f884828501610c64565b91505092915050565b61110a81610c45565b82525050565b5f82825260208201905092915050565b5f61112a82610e46565b6111348185611110565b9350611144818560208601610e60565b61114d81610c80565b840191505092915050565b5f60408201905061116b5f830185611101565b818103602083015261117d8184611120565b90509392505050565b5f82825260208201905092915050565b5f6111a082610ec0565b6111aa8185611186565b9350836020820285016111bc85610eda565b805f5b858110156111f757848403895281516111d88582610f3e565b94506111e383610f51565b925060208a019950506001810190506111bf565b50829750879550505050505092915050565b5f6020820190508181035f8301526112218184611196565b905092915050565b5f6020828403121561123e5761123d610c3d565b5b5f82013567ffffffffffffffff81111561125b5761125a610c41565b5b61126784828501610d87565b91505092915050565b61127981610ee9565b82525050565b5f6020820190506112925f830184611270565b92915050565b7f42616c6c6f7420646f6573206e6f7420657869737400000000000000000000005f82015250565b5f6112cc601583611110565b91506112d782611298565b602082019050919050565b5f6020820190508181035f8301526112f9816112c0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61133782610c45565b915061134283610c45565b925082820390508181111561135a57611359611300565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f43616e64696461746520616c72656164792065786973747300000000000000005f82015250565b5f6113c1601883611110565b91506113cc8261138d565b602082019050919050565b5f6020820190508181035f8301526113ee816113b5565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061143957607f821691505b60208210810361144c5761144b6113f5565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026114ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611473565b6114b88683611473565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6114f36114ee6114e984610c45565b6114d0565b610c45565b9050919050565b5f819050919050565b61150c836114d9565b611520611518826114fa565b84845461147f565b825550505050565b5f90565b611534611528565b61153f818484611503565b505050565b5b81811015611562576115575f8261152c565b600181019050611545565b5050565b601f8211156115a75761157881611452565b61158184611464565b81016020851015611590578190505b6115a461159c85611464565b830182611544565b50505b505050565b5f82821c905092915050565b5f6115c75f19846008026115ac565b1980831691505092915050565b5f6115df83836115b8565b9150826002028217905092915050565b6115f882610e46565b67ffffffffffffffff81111561161157611610610c90565b5b61161b8254611422565b611626828285611566565b5f60209050601f831160018114611657575f8415611645578287015190505b61164f85826115d4565b8655506116b6565b601f19841661166586611452565b5f5b8281101561168c57848901518255600182019150602085019450602081019050611667565b868310156116a957848901516116a5601f8916826115b8565b8355505b6001600288020188555050505b505050505050565b5f6116c882610c45565b91506116d383610c45565b92508282019050808211156116eb576116ea611300565b5b92915050565b7f43616e64696461746520646f6573206e6f7420657869737400000000000000005f82015250565b5f611725601883611110565b9150611730826116f1565b602082019050919050565b5f6020820190508181035f83015261175281611719565b9050919050565b5f61176382610ee9565b915061176e83610ee9565b9250828201905060ff81111561178757611786611300565b5b92915050565b5f61179782610c45565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036117c9576117c8611300565b5b60018201905091905056fea2646970667358221220e2a4fc1d4191a454bd6a68168a9be79a29bb5cd2be4c5a99686c29dcec5f8e7464736f6c63430008140033";

    public static final String FUNC_BALLOTLIST = "ballotList";

    public static final String FUNC_ADDBALLOT = "addBallot";

    public static final String FUNC_GETCANDIDATELIST = "getCandidateList";

    public static final String FUNC_ADDCANDIDATE = "addCandidate";

    public static final String FUNC_VOTEFORCANDIDATE = "voteForCandidate";

    public static final String FUNC_GETVOTECOUNT = "getVoteCount";

    public static final String FUNC_GETBALLOTLIST = "getBallotList";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voting(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, String>> ballotList(BigInteger param0) {
        final Function function = new Function(FUNC_BALLOTLIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, String>>(function,
                new Callable<Tuple2<BigInteger, String>>() {
                    @Override
                    public Tuple2<BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addBallot(String ballotName) {
        final Function function = new Function(
                FUNC_ADDBALLOT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(ballotName)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getCandidateList(BigInteger ballotId) {
        final Function function = new Function(FUNC_GETCANDIDATELIST,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ballotId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Candidate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> addCandidate(BigInteger ballotId, String candidateName) {
        final Function function = new Function(
                FUNC_ADDCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ballotId),
                        new org.web3j.abi.datatypes.Utf8String(candidateName)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> voteForCandidate(BigInteger ballotId, String candidate) {
        final Function function = new Function(
                FUNC_VOTEFORCANDIDATE,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ballotId),
                        new org.web3j.abi.datatypes.Utf8String(candidate)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getVoteCount(BigInteger ballotId, String candidate) {
        final Function function = new Function(FUNC_GETVOTECOUNT,
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ballotId),
                        new org.web3j.abi.datatypes.Utf8String(candidate)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> getBallotList() {
        final Function function = new Function(FUNC_GETBALLOTLIST,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Ballot>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voting load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voting(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voting load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voting load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voting(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Voting> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voting.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    @Getter
    public static class Candidate extends DynamicStruct {
        public String name;

        public BigInteger voteCount;

        public Candidate(String name, BigInteger voteCount) {
            super(new org.web3j.abi.datatypes.Utf8String(name),
                    new org.web3j.abi.datatypes.generated.Uint8(voteCount));
            this.name = name;
            this.voteCount = voteCount;
        }

        public Candidate(Utf8String name, Uint8 voteCount) {
            super(name, voteCount);
            this.name = name.getValue();
            this.voteCount = voteCount.getValue();
        }
    }

    @Getter
    public static class Ballot extends DynamicStruct {
        public BigInteger ballotId;

        public String ballotName;

        public List<Candidate> candidateList;

        public Ballot(BigInteger ballotId, String ballotName, List<Candidate> candidateList) {
            super(new org.web3j.abi.datatypes.generated.Uint256(ballotId),
                    new org.web3j.abi.datatypes.Utf8String(ballotName),
                    new org.web3j.abi.datatypes.DynamicArray<Candidate>(Candidate.class, candidateList));
            this.ballotId = ballotId;
            this.ballotName = ballotName;
            this.candidateList = candidateList;
        }

        public Ballot(Uint256 ballotId, Utf8String ballotName, @Parameterized(type = Candidate.class) DynamicArray<Candidate> candidateList) {
            super(ballotId, ballotName, candidateList);
            this.ballotId = ballotId.getValue();
            this.ballotName = ballotName.getValue();
            this.candidateList = candidateList.getValue();
        }
    }
}
